#!/usr/bin/env bash
set -e

usage() {
  echo "Usage: gh cp [OPTIONS] <repo> [<paths>...] [<dest>]"
  echo
  echo "Copy files from a GitHub repository to a local destination."
  echo
  echo "Options:"
  echo "  -h, --help           Show this help message and exit"
  echo "  -f, --file <path>    Read file paths from a file (one path per line)"
  echo "  -b, --branch <name>  Specify the branch to copy files from (default: main)"
  echo "  -c, --commit <hash>  Specify the commit hash to copy files from"
  echo
  echo "Arguments:"
  echo "  <repo>        The repository in the format 'owner/repo'"
  echo "  <paths>...    The paths to the files in the repository (separated by space)"
  echo "  <dest>        The local destination directory (optional, default: current directory)"
  echo
  echo "Examples:"
  echo "  gh cp myuser/myrepo path/to/file.txt"
  echo "  gh cp myuser/myrepo path/to/file1.txt path/to/file2.txt /local/directory"
  echo "  gh cp -f path_file.txt myuser/myrepo"
  echo "  gh cp -b feature-branch myuser/myrepo path/to/file.txt"
  echo "  gh cp -c a1b2c3d4 myuser/myrepo path/to/file.txt"
}

# Parse command-line options
branch="main"
commit=""
path_file=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      exit 0
      ;;
    -f|--file)
      path_file="$2"
      shift 2
      ;;
    -b|--branch)
      branch="$2"
      shift 2
      ;;
    -c|--commit)
      commit="$2"
      shift 2
      ;;
    *)
      break
      ;;
  esac
done

if [ $# -lt 1 ]; then
  echo "Error: Missing required arguments."
  echo "Please provide the repository."
  echo "Run 'gh cp --help' for more information."
  exit 1
fi

repo="$1"

# Check if the repository exists
repo_exists=$(gh api "repos/$repo" >/dev/null 2>&1; echo $?)
if [ "$repo_exists" -ne 0 ]; then
  echo "Error: Repository '$repo' does not exist or is not accessible."
  echo "Please ensure that the repository is specified in the format 'owner/repo' and that you have the necessary permissions."
  exit 1
fi

# Read paths from file if provided
if [ -n "$path_file" ]; then
  if [ ! -f "$path_file" ]; then
    echo "Error: File '$path_file' not found."
    echo "Please provide a valid file containing the file paths (one path per line)."
    exit 1
  fi
  paths=()
  while IFS= read -r line; do
    paths+=("$line")
  done < "$path_file"
else
  # If no path file is provided, read paths from the command line arguments
  paths=("${@:2}")
fi

# Set the destination directory
if [ "${paths[$((${#paths[@]} - 1))]}" = "." ]; then
  dest="."
  paths=("${paths[@]:0:$((${#paths[@]} - 1))}")
else
  dest="${paths[$((${#paths[@]} - 1))]}"
  if [ -d "$dest" ]; then
    paths=("${paths[@]:0:$((${#paths[@]} - 1))}")
  else
    dest="."
  fi
fi

# Validate the destination directory
if [ ! -d "$dest" ]; then
  echo "Error: Destination directory '$dest' does not exist."
  echo "Please provide a valid destination directory path."
  exit 1
fi

# Determine the reference (branch or commit) to use
ref=""
if [ -n "$commit" ]; then
  ref="$commit"
elif [ -n "$branch" ]; then
  ref="$branch"
else
  # If no branch or commit is specified, use the default branch
  default_branch=$(gh api "repos/$repo" --jq '.default_branch')
  ref="$default_branch"
fi

for path in "${paths[@]}"; do
  # Extract the file name from the path
  file_name=$(basename -- "$path")

  dest_file="$dest/$file_name"
  dest_dir="$(dirname -- "$dest_file")"
  mkdir -p "$dest_dir"

  # Download the file from the repository
  echo "Downloading file '$path' from repository '$repo' (ref: $ref)..."

  if ! curl -sL -H "Authorization: Bearer $(gh auth token)" \
    -H "Accept: application/vnd.github.v3.raw" \
    "https://api.github.com/repos/$repo/contents/$path?ref=$ref" -o "$dest_file"; then
    echo "Error: Failed to download file '$path' from repository '$repo' (ref: $ref)."
    echo "Please ensure that the file path is correct, the specified branch or commit exists, and that you have the necessary permissions to access the file."
    continue
  fi

  echo "File '$path' successfully copied from repository '$repo' (ref: $ref) to '$dest_file'."
done